datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(FREE)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  FREE
  PREMIUM
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model portfolios {
  id          String       @id @default(cuid())
  name        String
  userId      String
  template    String
  pages       pages[]
  sociallinks sociallink[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model pages {
  id           String     @id @default(cuid())
  title        String     @default("Home")
  sortOrder    Int        @default(0)
  portfolio_id String
  portfolios   portfolios @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)
  sections     sections[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model sections {
  id         String      @id @default(cuid())
  type       SectionType
  title      String      @default("Unlock the Power of Collaboration")
  text       String      @default("Empower your team to innovate faster with our all-in-one platform for building, deploying, and scaling web applications.")
  image      String?     @default("/placeholder-image.svg")
  link       String?     @default("#")
  page_id    String
  customData Json[]      @default([])
  version    String      @default("v0")
  pages      pages       @relation(fields: [page_id], references: [id], onDelete: Cascade)
  items      items[]
  skills     skills[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum SectionType {
  hero
  about
  projects
  gallery
  skill
  footer
}

model items {
  id          String   @id @default(cuid())
  section_id  String
  image       String?
  description String?
  link        String?
  name        String?
  sections    sections @relation(fields: [section_id], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model skills {
  id         String   @id @default(cuid())
  section_id String
  name       String
  percent    String?
  sections   sections @relation(fields: [section_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model sociallink {
  id           String     @id @default(cuid())
  icon         String
  link         String
  portfolio_id String
  portfolios   portfolios @relation(fields: [portfolio_id], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
